/*
 * Copyright 2018-2019 Karakun AG.
 * Copyright 2015-2018 Canoo Engineering AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath 'com.adarshr:gradle-test-logger-plugin:2.1.0'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.15.1'
        classpath 'org.asciidoctor:asciidoctor-gradle-jvm:3.2.0'
    }
}

plugins {
    id 'extra-java-module-info' // apply plugin written in buildSrc
}

extraJavaModuleInfo {
    autoConvert = true
}

ext {
    osQualifier = {
        def os = org.gradle.internal.os.OperatingSystem.current()
        if (os.isWindows()) {
            return 'win'
        } else if (os.isMacOsX()) {
            return 'mac'
        } else {
            return 'linux'
        }
    }()
}

task setVersionAndDateTimeForBuild() {
    def rootPropertiesFile = new Properties()
    file("gradle.properties").withInputStream { rootPropertiesFile.load(it) }
    Date date = new Date()
    String ricoVersion = rootPropertiesFile.getProperty("version")
    String buildDate = new java.text.SimpleDateFormat("yyyy-MM-dd").format(date)
    String buildTime = new java.text.SimpleDateFormat("HH:mm:ss").format(date)
    String ricoCoreProperties = "base/rico-core/src/main/resources/build.properties"
    doLast {
        ant.propertyfile(file: ricoCoreProperties) {
            entry(key: "version", value: ricoVersion)
            entry(key: "buildDate", value: buildDate)
            entry(key: "buildTime", value: buildTime)

        }

        // Removes the auto generated timestamp comment line(1st line only) that `ant.propertyfile` generates
        ant.replaceregexp(file: ricoCoreProperties, match: "^#.*\n", replace: "")
    }
}

gradle.startParameter.taskNames = [":setVersionAndDateTimeForBuild"] + gradle.startParameter.taskNames

//noinspection GroovyAssignabilityCheck
subprojects { proj ->

    if (proj.javaProject.toBoolean()) {
        apply plugin: 'idea'
        apply plugin: 'java-library'
        // apply plugin: 'com.adarshr.test-logger'

        if (proj.publishJars.toBoolean()) {
            java {
                modularity.inferModulePath = true
                //release = 8
            }
        }

        proj.tasks.withType(JavaCompile) {
            doFirst {
                println "Args for for $name are $options.allCompilerArgs"
            }
            //sourceCompatibility = proj.sourceCompatibility
            //targetCompatibility = proj.targetCompatibility

            //options.compilerArgs << '-Xlint:deprecation'
            //options.compilerArgs << '-Xlint:unchecked'
        }

//        testlogger {
//            theme 'standard-parallel'
//            showStandardStreams true
//            showFullStackTraces true
////            showPassedStandardStreams false
////            showSkippedStandardStreams false
//        }

        test {
            useJUnitPlatform()
            jvmArgs("-Djdk.attach.allowAttachSelf")
            testLogging.showStandardStreams = true
        }

        javadoc {
            options.addStringOption('encoding', 'UTF-8')
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives sourcesJar
            archives javadocJar
        }

        repositories {
            jcenter()
            mavenLocal()
        }

        dependencies {
            implementation "org.slf4j:slf4j-api:$slf4jVersion"
            compileOnly "org.apiguardian:apiguardian-api:$apiguardianVersion"

            testImplementation "org.testng:testng:$testngVersion"
            testImplementation "org.hamcrest:java-hamcrest:$hamcrestVersion"
            testImplementation "org.jmockit:jmockit:$jmockitVersion"
            testRuntime "org.slf4j:slf4j-simple:$slf4jVersion"
        }

        jar.finalizedBy sourcesJar
        jar.finalizedBy javadocJar
    }

    if (proj.publishJars.toBoolean()) {
        apply plugin: 'maven-publish'
        apply plugin: 'com.jfrog.bintray'
        apply plugin: 'com.jfrog.artifactory'

        jar {
            manifest {
                attributes(
                        'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                        'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                        'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
                )
            }
        }


        publishing {
            publications {
                mavenCustom(MavenPublication) {
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                }

                mavenJava(MavenPublication) {
                    from components.java
                    pom.withXml {
                        asNode().dependencies.'*'.findAll() {
                            it.scope.text() == 'runtime' && it.groupId.text() == 'org.openjfx'
                        }.each() {
                            it.scope*.value = 'provided'
                        }
                    }
                }
            }
        }

        project.ext.setProperty('bintrayUser', project.hasProperty('bintrayUsername') ? project.property('bintrayUsername') : System.getenv('BINTRAY_USERNAME'))
        project.ext.setProperty('bintrayKey', project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY'))

        bintray {
            user = proj.bintrayUser
            key = proj.bintrayKey
            publications = ['mavenCustom']
            pkg {
                repo = 'Rico'
                name = 'Rico'
                userOrg = 'karakun'
                licenses = ['Apache-2.0']
                vcsUrl = 'https://github.com/rico-project/rico.git'
            }
        }

        artifactory {
            contextUrl = 'https://oss.jfrog.org'
            publish {
                repository {
                    repoKey = 'oss-snapshot-local'
                    username = project.bintrayUser
                    password = project.bintrayKey
                }
                defaults {
                    publications('mavenCustom')
                }
            }
        }
    }

    if (proj.documentationProject.toBoolean()) {
        apply plugin: "org.asciidoctor.jvm.convert"

        repositories {
            jcenter()
            mavenCentral()
        }

        asciidoctor {
            baseDirFollowsSourceFile()

            options doctype: 'book'

            attributes = [
                    toc                    : 'left',
                    doctype                : 'book',
                    icons                  : 'font',
                    encoding               : 'utf-8',
                    sectlink               : true,
                    sectanchors            : true,
                    numbered               : true,
                    linkattrs              : true,
                    linkcss                : true,
                    'source-highlighter'   : 'coderay',
                    'coderay-linenums-mode': 'table',
                    'revision-number'      : project.version
            ]
        }

        assemble.dependsOn asciidoctor;
    }
}
